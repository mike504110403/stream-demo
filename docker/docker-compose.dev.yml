# 開發模式專用的 Docker Compose 配置
# 只啟動周邊服務，前後端由 IDE 啟動

services:
  # PostgreSQL 資料庫服務
  postgresql:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: stream_demo
      POSTGRES_USER: stream_user
      POSTGRES_PASSWORD: stream_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgresql/init:/docker-entrypoint-initdb.d
    networks:
      - stream-demo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stream_user -d stream_demo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL 資料庫服務
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: stream_demo
      MYSQL_USER: stream_user
      MYSQL_PASSWORD: stream_password
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf:/etc/mysql/conf.d
    networks:
      - stream-demo-network
    command: 
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password
      - --innodb-buffer-pool-size=256M
      - --max-connections=200
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "stream_user", "-pstream_password"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 緩存和訊息服務
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - stream-demo-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO 對象存儲服務 (S3 兼容)
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_SERVER_URL: http://localhost:9000
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      # 啟用 CORS 支持
      MINIO_API_CORS_ALLOW_ORIGIN: "*"
    ports:
      - "9000:9000"   # MinIO API 端口
      - "9001:9001"   # MinIO Console 端口
    volumes:
      - minio_data:/data
      - ./docker/minio/policies:/policies
    networks:
      - stream-demo-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # FFmpeg 影片轉碼服務
  ffmpeg-transcoder:
    build:
      context: ./ffmpeg
      dockerfile: Dockerfile
    container_name: ffmpeg-transcoder
    restart: unless-stopped
    volumes:
      - ffmpeg_temp:/tmp/transcoding
    networks:
      - stream-demo-network
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=stream-demo-videos
      - MINIO_PROCESSED_BUCKET=stream-demo-processed
    depends_on:
      - minio
    healthcheck:
      test: ["CMD", "ffmpeg", "-version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 外部流拉取服務 (優化版)
  stream-puller:
    build:
      context: ../backend
      dockerfile: cmd/stream_puller/Dockerfile.optimized
    container_name: stream-puller
    restart: unless-stopped
    ports:
      - "8083:8081"  # HLS 播放服務端口
    volumes:
      - public_streams:/tmp/public_streams
    networks:
      - stream-demo-network
    environment:
      - OUTPUT_DIR=/tmp/public_streams
      - HTTP_PORT=8081
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=stream_user
      - DB_PASS=stream_password
      - DB_NAME=stream_demo
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX RTMP 服務器 (LL-HLS 版本) - 處理 RTMP 推流和 HLS 生成
  nginx-rtmp:
    image: tiangolo/nginx-rtmp
    container_name: nginx-rtmp
    restart: unless-stopped
    ports:
      - "1935:1935"  # RTMP 推流端口 (對外開放，用於 OBS 等推流工具)
    volumes:
      - ./nginx/nginx-llhls.conf:/etc/nginx/nginx.conf:ro
      - hls_streams:/tmp/hls
      - hls_standard:/tmp/hls_standard
    networks:
      - stream-demo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理服務 (開發模式)
  nginx-reverse-proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile.reverse-proxy
    container_name: nginx-reverse-proxy
    restart: unless-stopped
    ports:
      - "8084:80"      # 統一入口端口
    networks:
      - stream-demo-network
    environment:
      # 開發模式配置 - 指向主機的 IDE 啟動的服務
      - DEV_MODE=true
      - FRONTEND_HOST=host.docker.internal
      - FRONTEND_PORT=5173
      - BACKEND_HOST=host.docker.internal
      - BACKEND_PORT=8080
    depends_on:
      - nginx-rtmp
      - stream-puller
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5

# 資料卷定義
volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  ffmpeg_temp:
    driver: local
  public_streams:
    driver: local
  hls_streams:
    driver: local
  hls_standard:
    driver: local

# 網路定義
networks:
  stream-demo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 